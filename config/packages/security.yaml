security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    role_hierarchy:
        ROLE_GUARDIAN: ROLE_USER
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: phone
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login_api:
            pattern: ^/api/login
            stateless: true
            user_checker: App\Security\UserChecker
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider
            user_checker: App\Security\UserChecker
            login_throttling:
                max_attempts: 3
                interval: '15 minutes'
            custom_authenticator: App\Security\AppAuthenticator
            remember_me:
                secret: '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds
                signature_properties: [ 'password', 'updatedAt' ]
                token_provider:
                    doctrine: true
            logout:
                path: auth_logout
          #  two_factor:
          #      auth_form_path: 2fa_login    # The route name you have used in the routes.yaml
           #     check_path: 2fa_login_check  # The route name you have used in the routes.yaml
            #    trusted_parameter_name: _trusted
                # where to redirect after logout
                # target: app_any_route
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        #####################
        ######## API ########
        #####################
        #Language [a verify after]
        - { path: ^/api/languages, roles: PUBLIC_ACCESS, methods: GET }
        #Guardian
        - { path: ^/api/guardians, roles: ROLE_GUARDIAN, methods: [GET, PUT] }
        #Building
        - { path: ^/api/buildings, roles: ROLE_GUARDIAN, methods: [ GET ] }
        #Resident
        - { path: ^/api/residents/building, roles: ROLE_GUARDIAN, methods: GET }
        - { path: ^/api/residents, roles: ROLE_GUARDIAN, methods: [ POST, POST, PUT ] }
        #Package
        - { path: ^/api/packages/building, roles: ROLE_GUARDIAN, methods: GET }
        - { path: ^/api/packages/handedover, roles: ROLE_GUARDIAN, methods: GET }
        - { path: ^/api/packages, roles: ROLE_GUARDIAN, methods: [ POST, PUT ] }
        #PackageDetail
        - { path: ^/api/packagedetails, roles: ROLE_GUARDIAN, methods: [ GET, POST, PUT ] }
        #Authentification
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api,       roles: ROLE_GUARDIAN, methods: GET }

        #########################
        ######## BackEnd ########
        #########################
        - { path: ^/logout, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: /4dm1n/logs, roles: ROLE_SUPER_ADMIN }
        - { path: ^/4dm1n, roles: ROLE_ADMIN }
        - { path: ^/2fa, roles: IS_AUTHENTICATED_2FA_IN_PROGRESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
